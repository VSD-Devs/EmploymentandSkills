{"version":3,"file":"static/chunks/app/career-quiz/page-91b4c5049d12f015.js","mappings":"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","sources":["webpack://_N_E/ignored|/Users/user/Downloads/project 3/node_modules/next/dist/shared/lib/router|./utils/resolve-rewrites","webpack://_N_E/?cb02","webpack://_N_E/./src/components/CareerQuizResults.tsx","webpack://_N_E/./src/app/career-quiz/page.tsx"],"sourcesContent":["/* (ignored) */","import(/* webpackMode: \"eager\" */ \"/Users/user/Downloads/project 3/src/app/career-quiz/page.tsx\");\n","'use client';\n\nimport { Sparkles, ChevronRight, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\nimport type { CareerProfile } from '@/data/careerQuizData';\nimport { sectorToRoles } from '@/data/careerQuizData';\nimport { roleData } from '@/data/roles';\nimport type { RoleData } from '@/types/role';\nimport { useRouter } from 'next/router';\n\ninterface CareerQuizResultsProps {\n  recommendations: CareerProfile;\n  isDetailedAnalysis: boolean;\n  onRetake: () => void;\n}\n\n// Map roles to their primary sectors for URL generation\nconst roleToSector: { [key: string]: string } = {\n  'hospitality-manager': 'hospitality-tourism',\n  'events-coordinator': 'hospitality-tourism',\n  'data-analyst': 'digital-tech',\n  'junior-developer': 'digital-tech',\n  'software-developer': 'digital-tech',\n  'digital-project-manager': 'digital-tech',\n  'healthcare-assistant': 'healthcare',\n  'care-worker': 'healthcare',\n  'support-worker': 'healthcare',\n  'registered-nurse': 'healthcare',\n  'specialist-practitioner': 'healthcare',\n  'team-leader': 'business-finance',\n  'financial-advisor': 'business-finance',\n  'manufacturing-technician': 'manufacturing',\n  'production-supervisor': 'manufacturing',\n  'manufacturing-engineer': 'manufacturing',\n  'site-supervisor': 'construction',\n  'project-manager': 'construction',\n  'construction-manager': 'construction',\n  'digital-designer': 'creative-media',\n  'content-creator': 'creative-media'\n};\n\nexport default function CareerQuizResults({\n  recommendations,\n  isDetailedAnalysis,\n  onRetake\n}: CareerQuizResultsProps) {\n  const { description, recommendedSectors, traits } = recommendations;\n  const router = useRouter();\n\n  // Save state before navigating to role\n  const handleRoleClick = (role: string) => {\n    // Save quiz state to local storage\n    const stateToSave = {\n      answers: [],\n      stage: isDetailedAnalysis ? 2 : 1,\n      showResults: true\n    };\n    localStorage.setItem('careerQuizState', JSON.stringify(stateToSave));\n    \n    // Get the sector for this role\n    const sector = roleToSector[role];\n    if (!sector) {\n      console.error(`No sector found for role: ${role}`);\n      return;\n    }\n    \n    // Navigate to the correct path\n    router.push(`/pathways/${sector}/roles/${role}`);\n  };\n\n  // Get all recommended roles based on sectors and limit based on stage\n  const recommendedRoles = recommendedSectors\n    .flatMap(sector => sectorToRoles[sector] || [])\n    .filter((role, index, self) => self.indexOf(role) === index) // Remove duplicates\n    .slice(0, isDetailedAnalysis ? 5 : 3); // Limit to 3 roles for stage 1, 5 for stage 2\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <div className=\"text-center mb-12\">\n        <h2 className=\"text-3xl font-bold text-zinc-900 mb-4\">Your Career Analysis</h2>\n        <p className=\"text-lg text-zinc-600\">\n          Based on your responses, we've identified career paths that align with your profile.\n          {isDetailedAnalysis && ' Here\\'s your detailed career analysis:'}\n        </p>\n      </div>\n\n      {/* Profile Overview */}\n      <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-8\">\n        <h3 className=\"text-2xl font-semibold text-zinc-900 mb-6\">Your Profile</h3>\n        <p className=\"text-lg text-zinc-600 mb-6\">{description}</p>\n        \n        <div className=\"grid gap-4\">\n          <div>\n            <h4 className=\"font-medium text-zinc-900 mb-3\">Key Traits</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {traits.map((trait, index) => (\n                <span\n                  key={index}\n                  className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800\"\n                >\n                  {trait}\n                </span>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recommended Roles */}\n      <div className=\"bg-white rounded-2xl shadow-xl p-8 mb-8\">\n        <h3 className=\"text-2xl font-semibold text-zinc-900 mb-6\">\n          Recommended Roles\n        </h3>\n        <div className=\"grid gap-6\">\n          {recommendedRoles.map((roleSlug: string) => {\n            const roleInfo = roleData[roleSlug];\n            if (!roleInfo) return null;\n\n            const sectorPath = roleToSector[roleSlug];\n            if (!sectorPath) return null;\n\n            return (\n              <div \n                key={roleSlug} \n                className=\"role-card cursor-pointer hover:shadow-lg transition-shadow\"\n                onClick={() => handleRoleClick(roleSlug)}\n              >\n                <div className=\"border border-zinc-200 rounded-xl p-6\">\n                  <h4 className=\"text-xl font-semibold text-zinc-900 mb-2\">{roleInfo.title}</h4>\n                  <p className=\"text-zinc-600 mb-4\">{roleInfo.description}</p>\n                  \n                  <div className=\"grid sm:grid-cols-3 gap-4 mb-4\">\n                    <div>\n                      <h5 className=\"font-medium text-zinc-900 mb-1\">Entry Level</h5>\n                      <p className=\"text-zinc-600\">{roleInfo.salary.entry}</p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-zinc-900 mb-1\">Experienced</h5>\n                      <p className=\"text-zinc-600\">{roleInfo.salary.experienced}</p>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-zinc-900 mb-1\">Senior Level</h5>\n                      <p className=\"text-zinc-600\">{roleInfo.salary.senior}</p>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h5 className=\"font-medium text-zinc-900 mb-2\">Key Skills</h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {roleInfo.skills.map((skill: string, index: number) => (\n                        <span\n                          key={index}\n                          className=\"px-3 py-1 bg-emerald-100 text-emerald-800 rounded-full text-sm\"\n                        >\n                          {skill}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"mt-6\">\n                    <h5 className=\"font-medium text-zinc-900 mb-4\">Educational Paths</h5>\n                    <div className=\"grid sm:grid-cols-2 gap-4\">\n                      <div className=\"p-4 rounded-lg bg-zinc-50\">\n                        <h6 className=\"font-medium text-zinc-900 mb-2\">{roleInfo.paths.university.title}</h6>\n                        <p className=\"text-sm text-zinc-600\">{roleInfo.paths.university.description}</p>\n                      </div>\n                      <div className=\"p-4 rounded-lg bg-zinc-50\">\n                        <h6 className=\"font-medium text-zinc-900 mb-2\">{roleInfo.paths.apprenticeship.title}</h6>\n                        <p className=\"text-sm text-zinc-600\">{roleInfo.paths.apprenticeship.description}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div className=\"flex justify-between items-center\">\n        <button\n          onClick={onRetake}\n          className=\"text-lg text-emerald-600 font-medium hover:text-emerald-500\"\n        >\n          Retake Quiz\n        </button>\n        <Link\n          href=\"/pathways\"\n          className=\"inline-flex items-center text-lg text-white bg-emerald-600 px-8 py-4 rounded-xl hover:bg-emerald-500 transition-colors shadow-lg hover:shadow-xl\"\n        >\n          Explore All Pathways\n          <ChevronRight className=\"ml-2 h-6 w-6\" />\n        </Link>\n      </div>\n    </div>\n  );\n} ","'use client';\n\nimport { useState } from 'react';\nimport CareerQuizResults from '@/components/CareerQuizResults';\nimport { quizQuestions, careerProfiles } from '@/data/careerQuizData';\nimport type { CareerProfile } from '@/data/careerQuizData';\nimport Link from 'next/link';\nimport { ChevronRight } from 'lucide-react';\n\ninterface QuizOption {\n  id: string;\n  text: string;\n  paths: string[];\n}\n\nconst getPathwaySlug = (sector: string): string => {\n  const pathwayMap: { [key: string]: string } = {\n    'Technology': 'digital-tech',\n    'Healthcare': 'health-care',\n    'Engineering': 'engineering',\n    'Business': 'business',\n    'Creative': 'creative',\n    'Education': 'education',\n    'Construction': 'construction',\n    'Manufacturing': 'manufacturing'\n  };\n  return pathwayMap[sector] || 'digital-tech'; // Default to digital-tech if no match\n};\n\nexport default function CareerQuizPage() {\n  const [currentStage, setCurrentStage] = useState(1);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answers, setAnswers] = useState<string[]>([]);\n  const [recommendations, setRecommendations] = useState<CareerProfile | null>(null);\n\n  const handleAnswer = (answer: string) => {\n    const newAnswers = [...answers, answer];\n    setAnswers(newAnswers);\n\n    if (currentQuestion === quizQuestions[currentStage - 1].options.length - 1) {\n      if (currentStage === 2) {\n        setRecommendations(getCareerProfile(newAnswers));\n      } else {\n        setCurrentStage(2);\n        setCurrentQuestion(0);\n      }\n    } else {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n  };\n\n  const getCareerProfile = (userAnswers: string[]): CareerProfile => {\n    // Count the paths that match each profile\n    const profileScores: { [key: string]: number } = {};\n    \n    // Get all paths from answers\n    const selectedPaths = userAnswers.flatMap(answerId => {\n      const question = quizQuestions[currentStage - 1];\n      const option = question.options.find(opt => opt.id === answerId);\n      return option ? option.paths : [];\n    });\n\n    // Score each profile based on matching sectors\n    Object.entries(careerProfiles).forEach(([profile, data]) => {\n      const matchingPaths = selectedPaths.filter(path => \n        data.recommendedSectors.includes(path)\n      );\n      profileScores[profile] = matchingPaths.length;\n    });\n\n    // Find the profile with the highest score\n    const bestMatch = Object.entries(profileScores)\n      .sort(([,a], [,b]) => b - a)[0][0];\n\n    return careerProfiles[bestMatch];\n  };\n\n  const handleRetake = () => {\n    setCurrentStage(1);\n    setCurrentQuestion(0);\n    setAnswers([]);\n    setRecommendations(null);\n  };\n\n  const currentQuestions = quizQuestions[currentStage - 1];\n  const question = currentQuestions;\n\n  return (\n    <main className=\"min-h-screen bg-zinc-50\">\n      <div className=\"max-w-7xl mx-auto px-4 py-16 sm:px-6 lg:px-8\">\n        {recommendations ? (\n          <CareerQuizResults\n            recommendations={recommendations}\n            isDetailedAnalysis={currentStage === 2}\n            onRetake={handleRetake}\n          />\n        ) : (\n          <div className=\"max-w-3xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h1 className=\"text-4xl font-bold text-zinc-900 mb-4\">\n                Career Path Discovery Quiz\n              </h1>\n              <p className=\"text-lg text-zinc-600\">\n                {currentStage === 1\n                  ? 'Discover your ideal career path by answering a few questions about your interests and preferences.'\n                  : 'Let\\'s dive deeper into your professional strengths and aspirations.'}\n              </p>\n            </div>\n\n            <div className=\"bg-white rounded-2xl shadow-xl p-8\">\n              <div className=\"mb-8\">\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm font-medium text-zinc-500\">\n                    Stage {currentStage} of 2\n                  </span>\n                  <span className=\"text-sm font-medium text-zinc-500\">\n                    Question {currentQuestion + 1} of {question.options.length}\n                  </span>\n                </div>\n                <div className=\"w-full bg-zinc-200 rounded-full h-2\">\n                  <div\n                    className=\"bg-emerald-600 h-2 rounded-full transition-all duration-300\"\n                    style={{\n                      width: `${((currentQuestion + 1) / question.options.length) * 100}%`\n                    }}\n                  />\n                </div>\n              </div>\n\n              <h2 className=\"text-2xl font-semibold text-zinc-900 mb-8\">\n                {question.question}\n              </h2>\n\n              <div className=\"grid gap-4\">\n                {question.options.map((option: QuizOption) => (\n                  <button\n                    key={option.id}\n                    onClick={() => handleAnswer(option.id)}\n                    className=\"w-full text-left px-6 py-4 rounded-xl border-2 border-zinc-200 hover:border-emerald-500 hover:bg-emerald-50 transition-colors\"\n                  >\n                    <span className=\"block text-lg font-medium text-zinc-900\">\n                      {option.text}\n                    </span>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </main>\n  );\n} "],"names":["Promise","resolve","then","__webpack_require__","bind","roleToSector","CareerQuizResults","param","recommendations","isDetailedAnalysis","onRetake","description","recommendedSectors","traits","router","useRouter","handleRoleClick","localStorage","setItem","JSON","stringify","answers","stage","showResults","sector","role","console","error","concat","push","recommendedRoles","flatMap","sectorToRoles","filter","index","self","indexOf","slice","jsx_runtime","jsxs","div","className","jsx","h2","p","h3","h4","map","trait","span","roleInfo","roleData","roleSlug","onClick","title","h5","salary","entry","experienced","senior","skills","skill","h6","paths","university","apprenticeship","button","Link","href","ChevronRight","CareerQuizPage","currentStage","setCurrentStage","useState","currentQuestion","setCurrentQuestion","setAnswers","setRecommendations","handleAnswer","newAnswers","answer","quizQuestions","options","length","getCareerProfile","profileScores","selectedPaths","userAnswers","answerId","option","question","find","opt","id","Object","entries","careerProfiles","forEach","profile","data","matchingPaths","path","includes","bestMatch","sort","param1","a","b","currentQuestions","main","h1","style","width","text"],"sourceRoot":""}